name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  buildAndTest:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Test Book Service
        working-directory: ./Books
        run: |
          npm install
          npm test

      - name: Test User Service
        working-directory: ./User
        run: |
          npm install
          npm test

      - name: Test Order Service
        working-directory: ./Orders
        run: |
          npm install
          npm test

  SnykSecurityScan:
    needs: buildAndTest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate with Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Scan
        run: snyk test --json > snyk_report.json || true

      - name: Upload Snyk report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: snyk-report
          path: snyk_report.json

  SecretsScan:
    needs: SnykSecurityScan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  dockerize:
    needs: SecretsScan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: docker login
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: docker build books
        run: |
          docker build ./Books -t ${{ secrets.DOCKER_USERNAME }}/books
      - name: docker build orders
        run: |
          docker build ./Orders -t ${{ secrets.DOCKER_USERNAME }}/orders
      - name: docker build user
        run: |
          docker build ./User -t ${{ secrets.DOCKER_USERNAME }}/user
      - name: docker build gateway
        run: |
          docker build ./gateway -t ${{ secrets.DOCKER_USERNAME }}/gateway
      - name: docker push books
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/books
      - name: docker push orders
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/orders
      - name: docker push user
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/user
      - name: docker push gateway
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/gateway

  deploy:
    needs: dockerize
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.SERVICE_ACCOUNT_KEY }}
      - name: Configure Docker CLI
        run: gcloud auth configure-docker

      - name: Build and push images (Consider using a loop or reusable script)
        run: |
          docker build ./Books -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/books
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/books

          docker build ./Orders -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/orders
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/orders

          docker build ./User -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/user
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/user

          docker build ./Gateway -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/gateway
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/gateway

      - name: Deploy to Cloud Run test
        run: |
          gcloud run deploy books --image=gcr.io/${{ secrets.GCP_PROJECT_ID }}/books --platform=managed --region=REGION_YOU_WANT (e.g., us-central1)
          gcloud run deploy orders --image=gcr.io/${{ secrets.GCP_PROJECT_ID }}/orders --platform=managed --region=REGION_YOU_WANT
          gcloud run deploy user --image=gcr.io/${{ secrets.GCP_PROJECT_ID }}/user --platform=managed --region=REGION_YOU_WANT
          gcloud run deploy gateway --image=gcr.io/${{ secrets.GCP_PROJECT_ID }}/gateway --platform=managed --region=REGION_YOU_WANT
